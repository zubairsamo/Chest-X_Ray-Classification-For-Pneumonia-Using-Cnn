# -*- coding: utf-8 -*-
"""Chest_Xray_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IjdaLHubOLnSDUKtEQDttovGS86GtcQA
"""

from google.colab import files

files.upload()

mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

! mkdir Data

! unzip /content/chest-xray-pneumonia.zip -d Data

# Commented out IPython magic to ensure Python compatibility.
import cv2
import matplotlib.pyplot as plt
# %matplotlib inline

Normal_img=cv2.imread("/content/Data/chest_xray/chest_xray/train/NORMAL/IM-0131-0001.jpeg")

plt.imshow(Normal_img)

Normal_img.shape

Normal_img=cv2.cvtColor(Normal_img,cv2.COLOR_BGR2RGB)

Pneu_img=cv2.imread('/content/Data/chest_xray/chest_xray/train/PNEUMONIA/person1005_virus_1688.jpeg')

plt.imshow(Pneu_img)

Pneu_img.shape

Pneu_img=cv2.cvtColor(Pneu_img,cv2.COLOR_BGR2RGB)

from keras.preprocessing.image import ImageDataGenerator

Gen_img= ImageDataGenerator(
        rotation_range=40,
        width_shift_range=0.2,
        height_shift_range=0.2,
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest')

plt.imshow(Gen_img.random_transform(Normal_img))
print('Done')

Gen_img.flow_from_directory("/content/Data/chest_xray/chest_xray/train")

Gen_img.flow_from_directory("/content/Data/chest_xray/chest_xray/test")

Gen_img.flow_from_directory("/content/Data/chest_xray/chest_xray/val")

input_shape=(500,500,3)

from tensorflow.keras import Sequential

from tensorflow.keras.layers import Conv2D,Dense,Activation,Dropout,MaxPooling2D,Flatten

model=Sequential()

# conv Block 1
model.add(Conv2D(filters=32,kernel_size=(3,3),input_shape=input_shape,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# conv Block 2
model.add(Conv2D(filters=32,kernel_size=(3,3),input_shape=input_shape,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# conv Block 3
model.add(Conv2D(filters=64,kernel_size=(3,3),input_shape=input_shape,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# conv Block 4
model.add(Conv2D(filters=128,kernel_size=(3,3),input_shape=input_shape,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# Flatten Layer
model.add(Flatten())

# Dense for Connection
model.add(Dense(256))
model.add(Activation('relu'))

# DropOut Layer for avoiding overfitting

model.add(Dropout(0.5))
# Dense Layer for output
model.add(Dense(1))
# Activation for Output
model.add(Activation('sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.summary()

input_shape[:2]

batch_size=32
train_gen=Gen_img.flow_from_directory('/content/Data/chest_xray/chest_xray/train',
                                        target_size=input_shape[:2],
                                        batch_size=batch_size,
                                        class_mode='binary')

test_gen=Gen_img.flow_from_directory('/content/Data/chest_xray/chest_xray/test',
                                        target_size=input_shape[:2],
                                        batch_size=batch_size,
                                        class_mode='binary')

val_gen=Gen_img.flow_from_directory('/content/Data/chest_xray/chest_xray/val',
                                        target_size=input_shape[:2],
                                        batch_size=batch_size,
                                        class_mode='binary')

train_gen.class_indices

results=model.fit_generator(train_gen,epochs=10,steps_per_epoch=100,validation_data=test_gen,validation_steps=12)

type(results)

print(results.history['accuracy'])

print(results.history['loss'])

plt.plot(results.history['accuracy'])
plt.plot(results.history['loss'])
plt.title('Model Performance')
plt.ylabel('Accuracy')
plt.xlabel('Loss')
plt.legend(['Accuracy','Loss'],loc=('upper left'))
plt.show()

plt.plot(results.history['accuracy'])
plt.plot(results.history['val_accuracy'])
plt.title('Model Performance')
plt.ylabel('Accuracy')
plt.xlabel('Loss')
plt.legend(['Accuracy','val_accuracy'],loc=('upper left'))
plt.show()

from tensorflow.keras.preprocessing import image
import numpy as np

# For pneumonia put pneumonia image link 
# For Normal put Normal image link
Normal=image.load_img('/content/Data/chest_xray/train/PNEUMONIA/person1273_bacteria_3233.jpeg',target_size=(500,500,3))
Normal=image.img_to_array(Normal)
print(Normal.shape)
Normal=np.expand_dims(Normal,axis=0)
print(Normal.shape)
Normal=Normal/255

prediction=model.predict(Normal)

print(f'chances of Normal according to model is:{prediction}')

result=model.predict_classes(Normal)
print(result)
if result[0][0]==1:
  prediction='Pneumonia'
else:
  prediction='Normal'

print(prediction)

model.save_weights('Chest_Xray_Classifier.h5')

